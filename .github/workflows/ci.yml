name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.10"
  DJANGO_VERSION: "5.1.2"
  POSTGRES_VERSION: "15"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        django-version: ["5.1.2"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          {
            echo "DJANGO_SECRET_KEY=${{ secrets.SECRET_KEY }}"
            echo "DJANGO_DEBUG=${{ secrets.DEBUG }}"
            echo "DJANGO_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}"
            echo "DB_NAME=${{ secrets.DB_NAME }}"
            echo "DB_USER=${{ secrets.DB_USER }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_HOST=localhost"
            echo "DB_PORT=5432"
            echo "REDIS_URL=redis://localhost:6379/0"
            echo "CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000"
            echo "LOG_LEVEL=INFO"
            echo "LOG_FILE=logs/ci.log"
            echo "API_PAGE_SIZE=20"
            echo "API_MAX_PAGE_SIZE=100"
            echo "DEFAULT_LICENSE_EXPIRATION_DAYS=365"
            echo "MAX_SEATS_PER_LICENSE=100"
            echo "LICENSE_KEY_LENGTH=25"
          } >> $GITHUB_ENV

      - name: Create logs directory
        run: mkdir -p logs

      - name: Run database migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Create superuser for testing
        run: |
          python manage.py shell -c "
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='testadmin').exists():
              User.objects.create_superuser('testadmin', 'admin@test.com', 'testpass123')
          "

      - name: Run tests with pytest
        run: |
          pytest tests/ \
            --cov=licenses \
            --cov=users \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --durations=10 \
            --maxfail=5 \
            --reruns=2 \
            --reruns-delay=1 \
            -v

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-lint-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-lint-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (code formatting)
        run: |
          black --check --diff licenses/ users/ license_service/ tests/

      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff licenses/ users/ license_service/ tests/

      - name: Run Flake8 (linting)
        run: |
          flake8 licenses/ users/ license_service/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy (type checking)
        run: |
          mypy licenses/ users/ license_service/ --ignore-missing-imports

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (security linting)
        run: |
          bandit -r licenses/ users/ license_service/ -f json -o bandit-report.json || true

      - name: Run Safety (dependency vulnerability check)
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  api-documentation:
    name: API Documentation Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          {
            echo "DJANGO_SECRET_KEY=${{ secrets.SECRET_KEY }}"
            echo "DJANGO_DEBUG=${{ secrets.DEBUG }}"
            echo "DJANGO_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}"
            echo "DB_NAME=${{ secrets.DB_NAME }}"
            echo "DB_USER=${{ secrets.DB_USER }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_HOST=localhost"
            echo "DB_PORT=5432"
            echo "CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000"
          } >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Test API Schema generation
        run: |
          python manage.py spectacular --file schema.yml
          python manage.py spectacular --validate

      - name: Test Swagger UI accessibility
        run: |
          python manage.py runserver --noreload &
          sleep 10
          curl -f http://localhost:8000/api/schema/ || exit 1
          curl -f http://localhost:8000/api/docs/ || exit 1
          curl -f http://localhost:8000/api/redoc/ || exit 1

      - name: Upload API schema as artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-schema
          path: schema.yml

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint, security, api-documentation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint, security, api-documentation, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could include:
          # - Deploying to a staging server
          # - Running smoke tests
          # - Notifying stakeholders

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lint, security, api-documentation, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # This could include:
          # - Deploying to production servers
          # - Running health checks
          # - Notifying stakeholders
          # - Creating release tags

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, lint, security, api-documentation, build]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify on failure
        if: failure()
        run: |
          echo "CI/CD pipeline failed!"
          # Add your notification logic here
          # This could include:
          # - Sending Slack notifications
          # - Sending email alerts
          # - Creating GitHub issues

      - name: Notify on success
        if: success()
        run: |
          echo "CI/CD pipeline completed successfully!"
          # Add your notification logic here
          # This could include:
          # - Sending success notifications
          # - Updating status dashboards
